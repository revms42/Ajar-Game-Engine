>step 1: Display a static circle.
>step 2: Make the circle move, ricochette 
>step 3: Add static boxes, make sure the moving circle bounces off them.
>step 4: Make the moving circle user controllable. (note: a little more could be done here, but fulfills the criteria nicely).
>step 5: Add tile based level (note: again a little more could be done cleaning up collision detection, but it fulfills criteria).
step 6: Get level tiles from png.
step 7: Animate the user's circle using tile map. User should be animating even when not moving.
step 8: Change user's color when he gets to a certain square in the level.
step 9: Add enemy boxes. Game over when user touches one.
step 10: Allow user to shoot. Animate bullet. Kill enemy when bullet touches.

Side Project: Ant build scripts
	-Arguably necessary for extended development.
	-Good to have automated tests rigged up so that people can use them.
	
Side Project: JAXB for MD
	-Would be awesome to have since it could dramatically speed up prototyping.

step 11: Make enemies move randomly. Award points for killing the enemy. Display at death.
step 12: Implement A* pathfinding. Have enemies hunt player.
step 13: Give player life. Make player blink and become temporarily invincible when he looses life. Game over when life gone. Extra life with five kills.
step 14: Make enemies spawn at a set rate up to a certain number.
step 15: Upgrade player damage when a certain number of points have been reached.
step 16: Make level larger, implement scrolling around level with character.
step 17: Make several different enemies that shoot at the player with different shots.
step 18: Allow shooting enemies to drop weapons that the player can pick up and use. Change player color with different weapon.
step 19: Require ammo for enemy weapons. Replenish ammo when player picks up weapon.
step 20: Implement sounds. Allow sounds to be toggled on and off.

Development Break: Tower Defense game.
	-Several maps.
	-Towers with upgrade paths.
	-Progressively harder waves of enemies on timers.
	-Implement different difficulties with choice of next non-picked wave (you'd see this wave and next wave so it'd be the wave after next) exploiting weaknesses.
	-Targeting priorities.
	
	Challenges:
		Mouse picking, displaying stats in window.
		Choosing targets.
		Determining weaknesses.
		Displaying statuses.
		
step 21: Create platform gravity. Allow player to jump. Switch enemies to walking back and forth.
step 22: Tag certain blocks as "jump through". Extend to all directions.
step 23: Tag a certain areas as level boundries. Have multiple levels with boundries taking you between them.
step 24: Create a level file format that stores level, enemy, and palette information. Allow loading of levels.
step 25: Change enemy AI activation to requiring that a boundry around the enemy intersects the view.
step 26: Create a save file format that saves the state of the game. Allow saving and loading of game states.
step 27: Implement enemy/player weaknesses; allow enemies/players to take more damage from certain weapons.
step 28: Create loot tables for enemies. Allow them to drop different things.
step 29: Create player inventory. Create inventory screen. Allow player to select weapon/armor on inventory screen. Tie damage to weapon and armor.
step 30: Make weapons that have certain behaviors (like traveling in an arc or tracking the nearest enemy).

Side Project: Subspace
	-Bunch of different steps with different stats
	-Smart AI.
	
Side Project: Stars!
	-UI stuff: Clicking, issuing orders, etc....
	-Fair race creation
	-Ship creation
	-Real-time combat
	
Side Project: Battle Balls
	-Several characters
	-Good use of eaten and eater balls
	-Special powers

step 31: Create a weapon file description that describes how the weapons move and interact with enemies.
step 32: Implement different AI's for different enemies. Give AI's a decision tree and behavior patterns.
step 33: Create a criteria for "level over" along with a description of level order. Allow for branching between levels (different level over criteria).
step 34: Create a file format describing level order and branching. Allow for loading of level order descriptions.
step 35: Create different levels of enemy AI activation: The view performs culling, but the enemy must have their activation circle within a certain distance of the player's bounding box.
step 36: Change the circle used for determining when to go after the player to something more generic. Create "site lines" for certain enemies.
step 37: Implement music. Add music to file description.
step 38: Create death animations, death criteria for enemy and player.
step 39: Add criteria for changing music, implement player dead music.
step 40: Allow pseudo-pause for story-line narrative. Put in critierias for triggering in levels.

step 41: Create timed level events: Moving platforms, disappearing blocks, crumbling bridges, blocks on tracks, etc...
step 42: Create weapon reaction behavior: Animation, moving backward, freaking out, etc....
step 43: Create in world items that alter/add abilities, making jumps higher, allowing slides, changing form, etc... based on key combos.
step 44: Create weapons that modify what players and enemies can do, removing the ability to attack, jump, slowing them, etc....
step 45: Implement paralax world movement, with movement in front and behind the character. Describe in level file format.

Development Break: Mega Man Clone.
	-Standard 8 enemies, followed by another 16.
	-Enemy/Weapon weakness chains.
	-24 world tile-sets, 6 end tile-sets.
	-Difficulty levels.
	-Storyline.
	-Semi-smart enemies.
	
	Challenges:
		User interface may be a bitch.
		Lots of level creation.
		Lots of image animation.
		Sound and music?

step 46: Sprites made up of groups of images; leaf-node relation.
step 47: Movements described as rotation and translation of an image on a sprite relative to parent.
step 48: Complex criteria for animation picking.
step 49: Implement doors: Require keys.
step 50: World change events: Flags that change how a level is interpreted.
step 51: Add world change events to the level description along with how they're to be processed.
step 52: Implement animations associated with the states revolving around being weapon modified.
step 53: Scrolling levels; death if you go off the screen. Implement in level file.
step 54: Non-square floor behavior.
step 55: Mutable music and description for mutable music.

step 56: Develop a file format that describes how different tilesets can be used to randomly create a level.
step 57: Develop a random level generator that could correctly create a level that a player could jump through.
step 58: Extend the random level generator to create the level such that a certain pre-defined action is needed to complete it.
step 59: Extend the RLG to stitch together levels in such a way that it will get them to flow from one to another, inserting parts where you need certain abilities.
step 60: Extend the RLG to allow branching to other parts.
step 61: Create more RLG heuristics to make different flavors of level section, such as falling, platform jumping, climbing, etc....
step 62: Marry RLG heuristics to enemy selection, allowing for selection of appropriate enemies based on perceived level.
step 63: Create more RLG heuristics to make "run from enemy" levels, boss sections, mob sections, guardian sections, etc....
step 64: Create a world RLG that will start in a start zone and build out a whole world, populated with enemies, where enemy level is appropriate, ability nodes are reachable in branches, and there are no unreachable areas.
step 65: Create option in RLG that allows for euclidian or non-euclidian levels.

step 66: Create teleporters, markets, save zones (?).
step 67: Create in-game display of map, showing features.
step 68: Allow RLG to account for teleporters, markets, and save zones (?).
step 69: Allow RLG to modify enemy drop list to allow for drop-specific progress inhibiting challenges.
step 70: Create user following AI that attempts to assist.

Development Break: Castlevania Clone.
	-Good god this could get crazy.
	-Multitudes of enemies, weapons, tilesets, everything.
	-Mutable music depending on how good you're doing.
	-Randomly generated levels
	-Adjustable difficulty that changes level generation options.
	-Multiple different unlockable playable characters.
	
	Challenges:
		Everything.

step 71: Isometric tile engine: Flat world using pngs.
step 72: Varied height tiles.
step 73: Sloped tiles.
step 74: Create file format for isometric tile maps.
step 75: Create isometric sprite sets.
step 76: Create mouse-click based movement and path-finding.
step 77: Create animation handling for moving up and down levels in iso.
step 78: Create a turn-based movement model.
step 79: Create definitions of weapons and spells that use iso for targeting.
step 80: Create buildings and other environment in iso.

step 81: Create building interaction for placement doing valid placement checking.
step 82: Create a switch to move between simulation continuous mode (city-building) and turn-based (combat).
step 83: Implement perspective switching and zooming.
step 84: Create a model dictating what things can be placed / must be placed next to each other.
step 85: Allow buildings to be influenced by other buildings and units in the area.
step 86: Implement unit recruitment, creating squads, and equiping squads.
step 87: Create a resource system, resource requirements for units and buildings, and resource spending.
step 88: Create building "walkers" and status buildings and building upgrading.
step 89: Implement a trading system, with trade buildings and scheduled traders.
step 90: Create a world map with other cities you can trade with. 