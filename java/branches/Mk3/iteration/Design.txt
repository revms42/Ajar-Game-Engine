-Positioning-
Each child should be arranged with an offset from their parent. When the parent is moved all children, subsequently, move. There
need to be methods for determining absolute position of children quickly for purposes of culling. 

-Culling-
Culling is best done top-down: Given an area or volume start at the root node and weed out all the nodes that are children that
do not intersect, recursively. This gives you a list of all nodes that should receive messages. The easiest way to do this
is to have nodes determine if they themselves are on screen, given the area. But, since children have locations relative to their
parents, it may be more effective to have the "area" determine what's inside it.

-Collision-
With a culled set of nodes it should be easy to determine which are capable of collision interaction. From there the method must 
be a reduction interaction, i.e. the first node is tested against the rest of the list complete, the second against all starting 
with the third, etc....
Furthermore, when dealing with tile-maps you're liable to have large chunks of collidable area. The loader should be able to "add"
those areas together, applying them to the domains, rather than the individual tiles. This can be done with the same step that sets
up the domains.

-Image Mappers-
There needs to be an easy way to get image maps into and out of the engine. They should take as an argument a single variable and 
spit out the appropriate image. They should be easy to use and hook up to display classes, and their should be default display classes
that use them. The image maps themselves should be self-contained, non-abstract entities that hold a map for parsing. These are 
the principle members of a mapper, which is abstract. Mappers should be able to be constructed of other mappers as well, which means
that there may need to be an "ImageSupplier" interface that both can implement. This will allow the much covetted int32->set+palette+
tile functionality.
There also needs to be some intelligence built into the system so that images are cached by the things that use them so that they 
don't have to be fetched every time. There should also be a way that the coder can specify, on load, which sequences will be used, so 
that the image sets can be paired down and only those in active use used.

-Structure-
There will probably need to be a two-way parent-child relationship between nodes. The parent->child behavior is necessary for 
culling etc..., and the child->parent is necessary for things like spawning, etc.... In addition, there should probably be a 
universal "root" node (rather than a relative one) for the purposes of directly accessing the highest level node (e.g. spawning
a new unit in global space).
Since all the interfaces regarding different aspects are separate, for the purposes of certain types of interaction it's 
necessary to include the "NodeDecorator" interface, which provides for getting the node proper given the decorator in question.
This raises an interesting question: Since the decorators themselves are bridges, should all the decorators merely extend from
Node? Is there an advantage to having the NodeDecorator interface or not?
This leads to another question: Currently all the implementations are, themselves, attributed. Do they really need to be, or 
should they instead refer to the node that they're supposed to be implementing?

-Entities and Polling-
Entities, which currently have one single method that defines their update behavior, are lacking in a method of requesting input into
their behavior. For this reason I'm introducing another method, requestInput, which will request input for the given entity from a 
class designed to handle AI Logic/Human input: Controller. pollForInput, in Controller, will take the entity as it's sole input 
(I may need to add a reference to some other game items later, but really those should probably be in the controller class) and will 
add actions to the entity as needed.
 