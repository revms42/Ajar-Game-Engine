-Positioning-
Each child should be arranged with an offset from their parent. When the parent is moved all children, subsequently, move. There
need to be methods for determining absolute position of children quickly for purposes of culling. 

-Culling-
Culling is best done top-down: Given an area or volume start at the root node and weed out all the nodes that are children that
do not intersect, recursively. This gives you a list of all nodes that should receive messages. The easiest way to do this
is to have nodes determine if they themselves are on screen, given the area. But, since children have locations relative to their
parents, it may be more effective to have the "area" determine what's inside it.

-Collision-
With a culled set of nodes it should be easy to determine which are capable of collision interaction. From there the method must 
be a reduction interaction, i.e. the first node is tested against the rest of the list complete, the second against all starting 
with the third, etc....

-Structure-
There will probably need to be a two-way parent-child relationship between nodes. The parent->child behavior is necessary for 
culling etc..., and the child->parent is necessary for things like spawning, etc.... In addition, there should probably be a 
universal "root" node (rather than a relative one) for the purposes of directly accessing the highest level node (e.g. spawning
a new unit in global space).
Since all the interfaces regarding different aspects are separate, for the purposes of certain types of interaction it's 
necessary to include the "NodeDecorator" interface, which provides for getting the node proper given the decorator in question.
This raises an interesting question: Since the decorators themselves are bridges, should all the decorators merely extend from
Node? Is there an advantage to having the NodeDecorator interface or not?
 